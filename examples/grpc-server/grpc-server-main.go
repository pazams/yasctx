package main

import (
	"context"
	"errors"
	"fmt"
	"io"
	"log/slog"
	"net"
	"os"
	"strings"

	slogctx "github.com/veqryn/slog-context"
	sloggrpc "github.com/veqryn/slog-context/grpc"
	pb "github.com/veqryn/slog-context/grpc/test/gen"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

func init() {
	// Create the *slogctx.Handler middleware
	h := slogctx.NewHandler(slog.NewJSONHandler(os.Stdout, nil), nil)
	slog.SetDefault(slog.New(h))
}

func main() {
	ctx := context.TODO()
	slog.Info("Starting server...")
	fmt.Println(`Please run: grpcurl -plaintext -d '{"name":"Bob", "option":1}' localhost:8000 com.github.veqryn.slogcontext.grpc.test.Test/Unary`)

	// Create api app
	app := &Api{}

	// Create a listener on TCP port for gRPC:
	lis, err := net.Listen("tcp", ":8000")
	if err != nil {
		slogctx.Error(ctx, "Unable to create grpc listener", slogctx.Err(err))
		panic(err)
	}

	// Create a gRPC server, and register our app as the handler/server for the service interface
	// https://github.com/grpc-ecosystem/go-grpc-middleware
	grpcServer := grpc.NewServer(
		// Add the interceptors
		// We will use the sloggrpc.AppendToAttributesAll option, which is fairly verbose with the attributes.
		// There is also a slimmer sloggrpc.AppendToAttributesDefault, which is what it used if no option is provided.
		// You can also write your own to customize which attributes are added, or rename their keys.
		// There are also other options available: WithErrorToLevel, and WithLogger
		grpc.ChainUnaryInterceptor(sloggrpc.SlogUnaryServerInterceptor(
			sloggrpc.WithAppendToAttributes(sloggrpc.AppendToAttributesAll),
			sloggrpc.WithInterceptorFilter(sloggrpc.InterceptorFilterIgnoreReflection))),

		grpc.ChainStreamInterceptor(sloggrpc.SlogStreamServerInterceptor(
			sloggrpc.WithAppendToAttributes(sloggrpc.AppendToAttributesAll),
			sloggrpc.WithInterceptorFilter(sloggrpc.InterceptorFilterIgnoreReflection))),
	)
	pb.RegisterTestServer(grpcServer, app)
	reflection.Register(grpcServer)

	// Start gRPC server
	serveErr := grpcServer.Serve(lis)
	if serveErr != nil && !errors.Is(serveErr, grpc.ErrServerStopped) {
		panic(serveErr)
	}
}

// GRPC setup
var _ pb.TestServer = &Api{}

type Api struct{}

// Each implemented RPC below includes an example of the logs generated by the sloggrpc interceptor

func (a Api) Unary(ctx context.Context, req *pb.TestReq) (*pb.TestResp, error) {
	/*
		{
		  "time": "2025-04-03T16:42:07Z",
		  "level": "INFO",
		  "msg": "rpcReq",
		  "grpc_system": "grpc",
		  "grpc_pkg": "com.github.veqryn.slogcontext.grpc.test",
		  "grpc_svc": "Test",
		  "grpc_method": "Unary",
		  "role": "server",
		  "stream_server": false,
		  "stream_client": false,
		  "peer_host": "192.168.76.213",
		  "peer_port": 49195,
		  "req": {
			"name": "John",
			"option": 1
		  }
		}
	*/
	return &pb.TestResp{
		Name:   "Hello " + req.Name,
		Option: req.Option + 1,
	}, nil
	/*
		{
		  "time": "2025-04-03T16:42:07Z",
		  "level": "INFO",
		  "msg": "rpcResp",
		  "code_name": "OK",
		  "code": 0,
		  "grpc_system": "grpc",
		  "grpc_pkg": "com.github.veqryn.slogcontext.grpc.test",
		  "grpc_svc": "Test",
		  "grpc_method": "Unary",
		  "role": "server",
		  "stream_server": false,
		  "stream_client": false,
		  "peer_host": "192.168.76.213",
		  "peer_port": 49195,
		  "ms": 0.001,
		  "resp": {
			"name": "Hello John",
			"option": 2
		  }
		}
	*/
}

func (a Api) ClientStream(stream grpc.ClientStreamingServer[pb.TestReq, pb.TestResp]) error {
	/*
		{
		  "time": "2025-04-03T16:42:07Z",
		  "level": "INFO",
		  "msg": "rpcStreamStart",
		  "grpc_system": "grpc",
		  "grpc_pkg": "com.github.veqryn.slogcontext.grpc.test",
		  "grpc_svc": "Test",
		  "grpc_method": "ClientStream",
		  "role": "server",
		  "stream_server": false,
		  "stream_client": true,
		  "peer_host": "192.168.76.213",
		  "peer_port": 49195
		}
	*/
	var reqNames []string
	var lastReqOption int32
	for {
		/*
			{
			  "time": "2025-04-03T16:42:07Z",
			  "level": "INFO",
			  "msg": "rpcStreamRecv",
			  "code_name": "OK",
			  "code": 0,
			  "grpc_system": "grpc",
			  "grpc_pkg": "com.github.veqryn.slogcontext.grpc.test",
			  "grpc_svc": "Test",
			  "grpc_method": "ClientStream",
			  "role": "server",
			  "stream_server": false,
			  "stream_client": true,
			  "peer_host": "192.168.76.213",
			  "peer_port": 49195,
			  "desc": {
				"msg_id": 3
			  },
			  "ms": 0.007708,
			  "req": {
				"name": "Bob",
				"option": 3
			  }
			}
		*/
		req, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			panic(err)
		}
		reqNames = append(reqNames, req.Name)
		lastReqOption = req.Option
	}

	return stream.SendAndClose(&pb.TestResp{
		Name:   "Hello " + strings.Join(reqNames, ", "),
		Option: lastReqOption + 1,
	})
	/*
		{
		  "time": "2025-04-03T16:42:07Z",
		  "level": "INFO",
		  "msg": "rpcStreamEnd",
		  "code_name": "OK",
		  "code": 0,
		  "grpc_system": "grpc",
		  "grpc_pkg": "com.github.veqryn.slogcontext.grpc.test",
		  "grpc_svc": "Test",
		  "grpc_method": "ClientStream",
		  "role": "server",
		  "stream_server": false,
		  "stream_client": true,
		  "peer_host": "192.168.76.213",
		  "peer_port": 49195,
		  "ms": 0.113458,
		  "resp": {
			"name": "Hello Bob, Bob, Bob",
			"option": 4
		  }
		}
	*/
}

func (a Api) ServerStream(req *pb.TestReq, stream grpc.ServerStreamingServer[pb.TestResp]) error {
	/*
		{
		  "time": "2025-04-03T16:42:07Z",
		  "level": "INFO",
		  "msg": "rpcStreamStart",
		  "code_name": "OK",
		  "code": 0,
		  "grpc_system": "grpc",
		  "grpc_pkg": "com.github.veqryn.slogcontext.grpc.test",
		  "grpc_svc": "Test",
		  "grpc_method": "ServerStream",
		  "role": "server",
		  "stream_server": true,
		  "stream_client": false,
		  "peer_host": "192.168.76.213",
		  "peer_port": 49195,
		  "ms": 0.032667,
		  "req": {
			"name": "Jane",
			"option": 1
		  }
		}
	*/
	for i := int32(1); i <= 3; i++ {
		/*
			{
			  "time": "2025-04-03T16:42:07Z",
			  "level": "INFO",
			  "msg": "rpcStreamSend",
			  "code_name": "OK",
			  "code": 0,
			  "grpc_system": "grpc",
			  "grpc_pkg": "com.github.veqryn.slogcontext.grpc.test",
			  "grpc_svc": "Test",
			  "grpc_method": "ServerStream",
			  "role": "server",
			  "stream_server": true,
			  "stream_client": false,
			  "peer_host": "192.168.76.213",
			  "peer_port": 49195,
			  "desc": {
				"msg_id": 1
			  },
			  "ms": 0.004417,
			  "resp": {
				"name": "Hello Jane",
				"option": 1
			  }
			}
		*/
		err := stream.Send(&pb.TestResp{
			Name:   "Hello " + req.Name,
			Option: req.Option + i,
		})
		if err != nil {
			panic(err)
		}
	}
	return nil
	/*
		{
		  "time": "2025-04-03T16:42:07Z",
		  "level": "INFO",
		  "msg": "rpcStreamEnd",
		  "code_name": "OK",
		  "code": 0,
		  "grpc_system": "grpc",
		  "grpc_pkg": "com.github.veqryn.slogcontext.grpc.test",
		  "grpc_svc": "Test",
		  "grpc_method": "ServerStream",
		  "role": "server",
		  "stream_server": true,
		  "stream_client": false,
		  "peer_host": "192.168.76.213",
		  "peer_port": 49195,
		  "ms": 0.075041
		}
	*/
}

func (a Api) BidirectionalStream(stream grpc.BidiStreamingServer[pb.TestReq, pb.TestResp]) error {
	/*
		{
		  "time": "2025-04-03T16:42:07Z",
		  "level": "INFO",
		  "msg": "rpcStreamStart",
		  "grpc_system": "grpc",
		  "grpc_pkg": "com.github.veqryn.slogcontext.grpc.test",
		  "grpc_svc": "Test",
		  "grpc_method": "BidirectionalStream",
		  "role": "server",
		  "stream_server": true,
		  "stream_client": true,
		  "peer_host": "192.168.76.213",
		  "peer_port": 49195
		}
	*/
	var i int32
	for {
		/*
			{
			  "time": "2025-04-03T16:42:07Z",
			  "level": "INFO",
			  "msg": "rpcStreamRecv",
			  "code_name": "OK",
			  "code": 0,
			  "grpc_system": "grpc",
			  "grpc_pkg": "com.github.veqryn.slogcontext.grpc.test",
			  "grpc_svc": "Test",
			  "grpc_method": "BidirectionalStream",
			  "role": "server",
			  "stream_server": true,
			  "stream_client": true,
			  "peer_host": "192.168.76.213",
			  "peer_port": 49195,
			  "desc": {
				"msg_id": 1
			  },
			  "ms": 0.006166,
			  "req": {
				"name": "Cat",
				"option": 1
			  }
			}
		*/
		req, err := stream.Recv()
		if err == io.EOF {
			break
		}
		if err != nil {
			panic(err)
		}

		/*
			{
			  "time": "2025-04-03T16:42:07Z",
			  "level": "INFO",
			  "msg": "rpcStreamSend",
			  "code_name": "OK",
			  "code": 0,
			  "grpc_system": "grpc",
			  "grpc_pkg": "com.github.veqryn.slogcontext.grpc.test",
			  "grpc_svc": "Test",
			  "grpc_method": "BidirectionalStream",
			  "role": "server",
			  "stream_server": true,
			  "stream_client": true,
			  "peer_host": "192.168.76.213",
			  "peer_port": 49195,
			  "desc": {
				"msg_id": 2
			  },
			  "ms": 0.00525,
			  "resp": {
				"name": "Hello Cat",
				"option": 2
			  }
			}
		*/
		i = req.Option + 1
		err = stream.Send(&pb.TestResp{
			Name:   "Hello " + req.Name,
			Option: i,
		})
		if err != nil {
			panic(err)
		}
	}

	/*
		{
		  "time": "2025-04-03T16:42:07Z",
		  "level": "INFO",
		  "msg": "rpcStreamSend",
		  "code_name": "OK",
		  "code": 0,
		  "grpc_system": "grpc",
		  "grpc_pkg": "com.github.veqryn.slogcontext.grpc.test",
		  "grpc_svc": "Test",
		  "grpc_method": "BidirectionalStream",
		  "role": "server",
		  "stream_server": true,
		  "stream_client": true,
		  "peer_host": "192.168.76.213",
		  "peer_port": 49195,
		  "desc": {
			"msg_id": 5
		  },
		  "ms": 0.000625,
		  "resp": {
			"name": "Goodbye",
			"option": 5
		  }
		}
	*/
	return stream.Send(&pb.TestResp{
		Name:   "Goodbye",
		Option: i + 1,
	})
	/*
		{
		  "time": "2025-04-03T16:42:07Z",
		  "level": "INFO",
		  "msg": "rpcStreamEnd",
		  "code_name": "OK",
		  "code": 0,
		  "grpc_system": "grpc",
		  "grpc_pkg": "com.github.veqryn.slogcontext.grpc.test",
		  "grpc_svc": "Test",
		  "grpc_method": "BidirectionalStream",
		  "role": "server",
		  "stream_server": true,
		  "stream_client": true,
		  "peer_host": "192.168.76.213",
		  "peer_port": 49195,
		  "ms": 0.496166
		}
	*/
}
